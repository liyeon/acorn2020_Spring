{"version":3,"sources":["pages/Home.js","pages/Study.js","pages/Game.js","pages/Buy.js","App09_SinglePage.js","Root.js","serviceWorker.js","index.js"],"names":["Home","Study","Game","match","params","name","Buy","location","query","queryString","parse","search","console","log","num","withRouter","history","activeStyle","color","fontWeight","React","useState","path","setPath","onChange","e","target","value","type","placeholder","onClick","push","to","exact","component","Root","Boolean","window","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kOAYeA,EATJ,WACP,OACI,6BACI,6ECMGC,EATH,WACR,OACI,6BACI,8ECYGC,EAfJ,SAAC,GAAW,IAAVC,EAAS,EAATA,MACT,OACI,6BACI,2EAGA,2BACI,gCACKA,EAAMC,OAAOC,MAFtB,wD,iBCiBGC,EAlBL,SAAC,GAAc,IAAbC,EAAY,EAAZA,SAEFC,EAAMC,IAAYC,MAAMH,EAASI,QAGvC,OADAC,QAAQC,IAAIL,GAER,6BACI,gGAGA,2BACKA,EAAMM,IADX,SACgB,6BACXN,EAAMH,KAFX,mBCyEGU,eAtFQ,SAAC,GAA8B,IAA7BR,EAA4B,EAA5BA,SAAiBS,GAAW,EAAlBb,MAAkB,EAAXa,SACtCJ,QAAQC,IAAIN,GAEZ,IAAMU,EAAY,CACdC,MAAO,MACPC,WAAY,QALiC,EAQ3BC,IAAMC,SAAS,IARY,mBAQ1CC,EAR0C,KAQpCC,EARoC,KAsBjD,OACI,6BACI,yDACA,2BACAC,SAhBM,SAACC,GACXF,EAAQE,EAAEC,OAAOC,QAgBbA,MAAOL,EACPM,KAAK,OACLC,YAAY,8EACZ,4BAAQC,QAfL,WACPlB,QAAQC,IAAIS,GAGZN,EAAQe,KAAKT,KAWT,gBACA,4BACI,4BACI,kBAAC,IAAD,CAASU,GAAG,IAAIf,YAAaA,GAA7B,SAKJ,4BACI,kBAAC,IAAD,CAASe,GAAG,SAASf,YAAaA,GAAlC,UAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,QAAQf,YAAaA,GAAjC,SAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,aAAaf,YAAaA,GAAtC,cAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,aAAaf,YAAaA,GAAtC,cAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,4BAA4Bf,YAAaA,GAArD,sCAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,2BAA2Bf,YAAaA,GAApD,sCAIJ,4BACI,kBAAC,IAAD,CAASe,GAAG,yBAAyBf,YAAaA,GAAlD,uCAKR,kBAAC,IAAD,CAAOgB,OAAK,EAACX,KAAK,IAAIY,UAAWlC,IACjC,kBAAC,IAAD,CAAOsB,KAAK,SAASY,UAAWjC,IAChC,kBAAC,IAAD,CAAOgC,OAAK,EAACX,KAAK,QAAQY,UAAWhC,IACrC,kBAAC,IAAD,CAAOoB,KAAK,cAAcY,UAAWhC,IACrC,kBAAC,IAAD,CAAOoB,KAAK,OAAOY,UAAW5B,QCtE3B6B,EARJ,WACP,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,QCIQC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAASnC,MACvB,2DCXNoC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.81dec394.chunk.js","sourcesContent":["//src/pages/Home.js 파일\nimport React from 'react';\n\nconst Home=()=>{\n    return(\n        <div>\n            <h2>\n                home 페이지 입니다.\n            </h2>\n        </div>\n    );\n};\nexport default Home;","//src/pages/Study.js 파일\nimport React from 'react';\n\nconst Study=()=>{\n    return(\n        <div>\n            <h2>\n            Study 페이지 입니다.\n            </h2>\n        </div>\n    );\n};\nexport default Study;","//src/pages/Game.js 파일\nimport React from 'react';\n\nconst Game=({match})=>{\n    return(\n        <div>\n            <h2>\n                Game 페이지 입니다.\n            </h2>\n            <p>\n                <strong>\n                    {match.params.name}\n                </strong>\n                게임을 시작합니다.\n            </p>\n        </div>\n    );\n};\nexport default Game;","// src/pages/Buy.js\n\nimport React from 'react';\nimport queryString from 'query-string';\n/*\n    query 문자열을 추출하려면 query-string 모듈을 설치해야한다.\n    > yarn add query-string \n*/\nconst Buy=({location})=>{\n    //query-string 모듈을 활용해서 query 문자열을 obejct fh qusghks\n    const query=queryString.parse(location.search);\n    //query 는 object이다.\n    console.log(query);\n    return(\n        <div>\n            <h2>\n                상품 구입 페이지 입니다.\n            </h2>\n            <p>\n                {query.num}번<br/>\n                {query.name} 상품\n            </p>\n        </div>\n    );\n};\n\nexport default Buy;","import React from 'react';\nimport { NavLink, Route, withRouter } from 'react-router-dom';\nimport { Home, Study, Game, Buy } from './pages';\n// 하단에서 withRouter()를 활용해서 export했기 때문에\n// location, math, history props가 전달된다.\nconst App09_SinglePage=({location, match, history})=>{\n    console.log(location);\n    //css를 오브젝트에 담는다. \n    const activeStyle={\n        color: \"red\",\n        fontWeight: \"bold\"\n    };\n\n    const [path, setPath]=React.useState('');\n    // input 요소에 문자열을 입력 했을 때 경로를 바꿔주고\n    const changed=(e)=>{\n        setPath(e.target.value);\n\n    };\n    //이동 버튼을 눌렀을 때 해당 경로로 이동시킨다.\n    const move=()=>{\n        console.log(path);\n        //프로퍼티로 전달되는 history객체를 이용해서 이동한다.\n        //history 객체를 이용해서 강제 이동시킨다.\n        history.push(path);\n    };\n    // exact - 해당 경로에 정확히 일치 할 때만 나오게 하겠다. \n    return(\n        <div>\n            <h1>Router 테스트</h1>\n            <input\n            onChange={changed}\n            value={path}\n            type=\"text\"\n            placeholder=\"이동할경로를 입력해주세요\" />\n            <button onClick={move}>이동</button>\n            <ul>\n                <li>\n                    <NavLink to=\"/\" activeStyle={activeStyle}>\n                        home\n                    </NavLink>\n                </li>\n                {/* 페이지내에서 동작하게끔 만들어둔다. */}\n                <li>\n                    <NavLink to=\"/study\" activeStyle={activeStyle}>\n                        study\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/game\" activeStyle={activeStyle}>\n                        game\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/game/star\" activeStyle={activeStyle}>\n                        star game\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/game/cart\" activeStyle={activeStyle}>\n                        cart game\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/buy?num=1&name=handphone\" activeStyle={activeStyle}>\n                        1번 상품 사기\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/buy?num=2&name=computer\" activeStyle={activeStyle}>\n                        2번 상품 사기\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"/buy?num=3&name=coffee\" activeStyle={activeStyle}>\n                        3번 상품 사기\n                    </NavLink>\n                </li>\n            </ul>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/study\" component={Study} />\n            <Route exact path=\"/game\" component={Game} />\n            <Route path=\"/game/:name\" component={Game} />\n            <Route path=\"/buy\" component={Buy}/>\n            \n        </div>\n    );\n};\n\n//withRouter() 함수를 호출해서 export 해주면 Router에 관련된\n//props 가 App09_SinglePage 컴포넌트에 전달된다.\nexport default withRouter(App09_SinglePage);","// src/Root.js file\nimport React from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport App09_SinglePage from './App09_SinglePage';\n\nconst Root=()=>{\n    return(\n        <BrowserRouter>\n            <App09_SinglePage/>\n        </BrowserRouter>\n    );\n};\n\nexport default Root;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Root';\nimport * as serviceWorker from './serviceWorker';\n//indexㄱㅏ 실행이 될 때 최초로 실행되는 자바스크립트\n//App.js를 import해서 사용한다.\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n//JSX를 해석한게 id root div 안에 들어간다.\n//.render - 화면을 구성한다. id가 root인 곳에다 그려라\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}